/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef ROBOT_TEMPLATE_H_
#define ROBOT_TEMPLATE_H_

#include "../states.h"
#include "../helper_funcs.h"
#include "../src/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'robot_template'.
*/

/*! Define number of states in the state enum */

#define ROBOT_TEMPLATE_STATE_COUNT 7

/*! Define dimension of the state configuration vector for orthogonal states. */
#define ROBOT_TEMPLATE_MAX_ORTHOGONAL_STATES 1


/*! Define indices of states in the StateConfVector */
#define SCVI_ROBOT_TEMPLATE_MAIN_REGION_OFF 0
#define SCVI_ROBOT_TEMPLATE_MAIN_REGION_DRIVE_UP_HILL 0
#define SCVI_ROBOT_TEMPLATE_MAIN_REGION_DRIVE_UP_HILL_R1_DRIVING 0
#define SCVI_ROBOT_TEMPLATE_MAIN_REGION_DRIVE_UP_HILL_R1_CALIBRATE_TILT 0
#define SCVI_ROBOT_TEMPLATE_MAIN_REGION_DRIVE_UP_HILL_R1_AVOID_CLIFF 0
#define SCVI_ROBOT_TEMPLATE_MAIN_REGION_DRIVE_UP_HILL_R1_SLOW_DOWN 0
#define SCVI_ROBOT_TEMPLATE_MAIN_REGION_DRIVE_UP_HILL_R1_TURN_AROUND 0

/*! Enumeration of all states */ 
typedef enum
{
	Robot_template_last_state,
	Robot_template_main_region_OFF,
	Robot_template_main_region_DRIVE_UP_HILL,
	Robot_template_main_region_DRIVE_UP_HILL_r1_DRIVING,
	Robot_template_main_region_DRIVE_UP_HILL_r1_CALIBRATE_TILT,
	Robot_template_main_region_DRIVE_UP_HILL_r1_AVOID_CLIFF,
	Robot_template_main_region_DRIVE_UP_HILL_r1_SLOW_DOWN,
	Robot_template_main_region_DRIVE_UP_HILL_r1_TURN_AROUND
} Robot_templateStates;





/*! Type definition of the data structure for the Robot_templateIface interface scope. */
typedef struct
{
	sc_boolean pushed;
	float distance;
	float angle;
	float tilt;
	float y_tilt;
	uint16_t prev_encoder;
	float angle_threshold;
	sc_boolean up;
	float original_error;
	float error;
	float rate;
	float rate_constant;
	float time;
	uint16_t left;
	uint16_t right;
	float left_turn_speed;
	float right_turn_speed;
	uint16_t left_drive_speed;
	uint16_t right_drive_speed;
	float k;
	sc_boolean is_clockwise;
	int32_t direction_fix;
} Robot_templateIface;




/*! 
 * Type definition of the data structure for the Robot_template state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	Robot_templateStates stateConfVector[ROBOT_TEMPLATE_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	Robot_templateIface iface;
} Robot_template;



/*! Initializes the Robot_template state machine data structures. Must be called before first usage.*/
extern void robot_template_init(Robot_template* handle);

/*! Activates the state machine */
extern void robot_template_enter(Robot_template* handle);

/*! Deactivates the state machine */
extern void robot_template_exit(Robot_template* handle);

/*! Performs a 'run to completion' step. */
extern void robot_template_runCycle(Robot_template* handle);


/*! Gets the value of the variable 'pushed' that is defined in the default interface scope. */ 
extern sc_boolean robot_templateIface_get_pushed(const Robot_template* handle);
/*! Sets the value of the variable 'pushed' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_pushed(Robot_template* handle, sc_boolean value);
/*! Gets the value of the variable 'distance' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_distance(const Robot_template* handle);
/*! Sets the value of the variable 'distance' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_distance(Robot_template* handle, float value);
/*! Gets the value of the variable 'angle' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_angle(const Robot_template* handle);
/*! Sets the value of the variable 'angle' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_angle(Robot_template* handle, float value);
/*! Gets the value of the variable 'tilt' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_tilt(const Robot_template* handle);
/*! Sets the value of the variable 'tilt' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_tilt(Robot_template* handle, float value);
/*! Gets the value of the variable 'y_tilt' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_y_tilt(const Robot_template* handle);
/*! Sets the value of the variable 'y_tilt' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_y_tilt(Robot_template* handle, float value);
/*! Gets the value of the variable 'prev_encoder' that is defined in the default interface scope. */ 
extern uint16_t robot_templateIface_get_prev_encoder(const Robot_template* handle);
/*! Sets the value of the variable 'prev_encoder' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_prev_encoder(Robot_template* handle, uint16_t value);
/*! Gets the value of the variable 'angle_threshold' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_angle_threshold(const Robot_template* handle);
/*! Sets the value of the variable 'angle_threshold' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_angle_threshold(Robot_template* handle, float value);
/*! Gets the value of the variable 'up' that is defined in the default interface scope. */ 
extern sc_boolean robot_templateIface_get_up(const Robot_template* handle);
/*! Sets the value of the variable 'up' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_up(Robot_template* handle, sc_boolean value);
/*! Gets the value of the variable 'original_error' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_original_error(const Robot_template* handle);
/*! Sets the value of the variable 'original_error' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_original_error(Robot_template* handle, float value);
/*! Gets the value of the variable 'error' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_error(const Robot_template* handle);
/*! Sets the value of the variable 'error' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_error(Robot_template* handle, float value);
/*! Gets the value of the variable 'rate' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_rate(const Robot_template* handle);
/*! Sets the value of the variable 'rate' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_rate(Robot_template* handle, float value);
/*! Gets the value of the variable 'rate_constant' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_rate_constant(const Robot_template* handle);
/*! Sets the value of the variable 'rate_constant' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_rate_constant(Robot_template* handle, float value);
/*! Gets the value of the variable 'time' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_time(const Robot_template* handle);
/*! Sets the value of the variable 'time' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_time(Robot_template* handle, float value);
/*! Gets the value of the variable 'left' that is defined in the default interface scope. */ 
extern uint16_t robot_templateIface_get_left(const Robot_template* handle);
/*! Sets the value of the variable 'left' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_left(Robot_template* handle, uint16_t value);
/*! Gets the value of the variable 'right' that is defined in the default interface scope. */ 
extern uint16_t robot_templateIface_get_right(const Robot_template* handle);
/*! Sets the value of the variable 'right' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_right(Robot_template* handle, uint16_t value);
/*! Gets the value of the variable 'left_turn_speed' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_left_turn_speed(const Robot_template* handle);
/*! Sets the value of the variable 'left_turn_speed' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_left_turn_speed(Robot_template* handle, float value);
/*! Gets the value of the variable 'right_turn_speed' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_right_turn_speed(const Robot_template* handle);
/*! Sets the value of the variable 'right_turn_speed' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_right_turn_speed(Robot_template* handle, float value);
/*! Gets the value of the variable 'left_drive_speed' that is defined in the default interface scope. */ 
extern uint16_t robot_templateIface_get_left_drive_speed(const Robot_template* handle);
/*! Sets the value of the variable 'left_drive_speed' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_left_drive_speed(Robot_template* handle, uint16_t value);
/*! Gets the value of the variable 'right_drive_speed' that is defined in the default interface scope. */ 
extern uint16_t robot_templateIface_get_right_drive_speed(const Robot_template* handle);
/*! Sets the value of the variable 'right_drive_speed' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_right_drive_speed(Robot_template* handle, uint16_t value);
/*! Gets the value of the variable 'k' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_k(const Robot_template* handle);
/*! Sets the value of the variable 'k' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_k(Robot_template* handle, float value);
/*! Gets the value of the variable 'is_clockwise' that is defined in the default interface scope. */ 
extern sc_boolean robot_templateIface_get_is_clockwise(const Robot_template* handle);
/*! Sets the value of the variable 'is_clockwise' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_is_clockwise(Robot_template* handle, sc_boolean value);
/*! Gets the value of the variable 'direction_fix' that is defined in the default interface scope. */ 
extern int32_t robot_templateIface_get_direction_fix(const Robot_template* handle);
/*! Sets the value of the variable 'direction_fix' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_direction_fix(Robot_template* handle, int32_t value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean robot_template_isActive(const Robot_template* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean robot_template_isFinal(const Robot_template* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean robot_template_isStateActive(const Robot_template* handle, Robot_templateStates state);


#ifdef __cplusplus
}
#endif 

#endif /* ROBOT_TEMPLATE_H_ */
